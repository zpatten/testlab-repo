#!/usr/bin/env ruby
#^syntax detection

# Labfile Format
#################
# This is a somewhat complex example; we define a single LXC node which will use
# vagrant to power our containers.  We define two network segments, a "backbone"
# router, a server in both our "east" and "west" virtual networks.  We also
# define our chef-server container and link it directly to both the "east" and
# "west" network segments.  We will use chef to provision the containers, thou
# one could simply omit the provisioners completely to spin up a set of machines
# for manual testing or other purposes.
#
# We also support building all of this dynamicly at runtime.
#
# This Labfile would be use mainly in cases of testing; where you have a very
# specific topology that you are trying to replicate and test against.

shell_provision_script = <<-EOF
set -x
apt-get -y update
apt-get -y install dnsutils
EOF

REPO = Dir.pwd
HOSTNAME = %x(hostname).split('.').first.strip

config Hash[
  :domain => "default.zone",
  :repo => REPO
]

# Here we define our node; in this case we are using the localhost.  We've
# selected the Vagrant provider so the Vagrant VM will be our target LXC node.
node :localhost do
  components %w(resolv bind)

  # This sets the provider for our node.  This could be many things, from
  # Vagrant, to AWS, to Local, to custom internal providers.  Any class can be
  # supplied assuming it's interface honors our contract.
  provider    TestLab::Provider::Vagrant

  # this is a generic configuration object (hash) which is supplied to
  # the provider
  config      Hash[
    :vagrant => {
      :id       => "testlab-repo-#{ENV['USER']}-#{HOSTNAME}".downcase,
      :cpus     => 2,
      :memory   => (4 * 1024.0).to_i,
      :box      => 'raring64',
      :file     => REPO
    }
  ]

  # Here we define our network segments; these will manifest into network
  # bridges on the target LXC node.
  network 'east' do
    address  '10.10.0.1/16'
    bridge   :br0
    route    true
  end

  network 'west' do
    address  '10.11.0.1/16'
    bridge   :br1
    route    true
  end

  # chef-server.default.zone
  ###########################
  container "chef-server" do
    distro        "ubuntu"
    release       "precise"

    # provisioners   [
    #   TestLab::Provisioner::AptCacherNG,
    #   TestLab::Provisioner::OmniTruck
    # ]
    provisioners  [
      TestLab::Provisioner::AptCacherNG,
      TestLab::Provisioner::Shell
    ]
    config        Hash[
      :script => shell_provision_script
    ]

    # Here we define a default user to seed onto the box.  This user will be
    # given passwordless sudo access as well.
    user 'deployer' do
      password  'deployer'
      uid       2600
      gid       2600
    end

    # interfaces define what networks this container is linked to and what our
    # configuration on that network should be.
    interface do
      network_id  'west'
      name        :eth0
      address     '10.11.0.200/16'
      mac         '00:00:5e:63:b5:9f'
      # primary     true
    end

    # interface do
    #   network_id 'west'
    #   name       :eth1
    #   address    '10.11.0.201/16'
    #   mac        '00:00:5e:08:63:df'
    # end
  end

  # server-east-1.east.zone
  ##########################
  container "server-east-1" do
    domain        "east.zone"

    distro        "ubuntu"
    release       "precise"

    # provisioners   [
    #   TestLab::Provisioner::AptCacherNG,
    #   TestLab::Provisioner::OmniBus
    # ]
    provisioners  [
      TestLab::Provisioner::AptCacherNG,
      TestLab::Provisioner::Shell
    ]
    config        Hash[
      :script => shell_provision_script
    ]

    user 'deployer' do
      password  'deployer'
      uid       2600
      gid       2600
    end

    interface do
      name       :eth0
      network_id 'east'
      address    '10.10.0.254/16'
      mac        '00:00:5e:b7:e5:15'
    end
  end

  # server-west-1.west.zone
  ##########################
  container "server-west-1" do
    domain        "west.zone"

    distro        "ubuntu"
    release       "precise"

    provisioners  [
      TestLab::Provisioner::AptCacherNG,
      TestLab::Provisioner::Shell
    ]
    config        Hash[
      :script => shell_provision_script
    ]

    user 'deployer' do
      password  'deployer'
      uid       2600
      gid       2600
    end

    interface do
      network_id 'west'
      name       :eth0
      address    '10.11.0.254/16'
      mac        '00:00:5e:48:e9:6f'
    end

  end

end
