#!/usr/bin/env ruby
#^syntax detection

# Labfile Simple Example
#########################
# This is a simple example that builds a lab with a chef-server and chef-client.

# Here we define our node; in this case we are using the localhost.  We've
# selected the Vagrant provider so the Vagrant VM will be our target LXC node.
node 'local' do

  # This sets the provider for our node.  This could be many things, from
  # Vagrant, to AWS, to Local, to custom internal providers.  Any class can be
  # supplied assuming it's interface honors our contract.
  provider      TestLab::Provider::Local

  # These are provisioners that only need to run against the node (i.e. they
  # do not have any container components).  Provisioner classes applied to
  # containers only are automatically interogated and executed during runtime
  # if they have a node component.
  provisioners  [
    TestLab::Provisioner::Raring,
    TestLab::Provisioner::AptCacherNG,
    TestLab::Provisioner::Bind,
    TestLab::Provisioner::Resolv
  ]

  # this is a generic configuration object (hash) which is supplied to
  # the provider
  # config      ({
  #   :local => {
  #     :user => "lxc-user",
  #     :identity => File.join('', 'path', 'to', 'my', 'ssh', 'identity')
  #   }
  # })

  # Here we define our network segments; these will manifest into network
  # bridges on the target LXC node.
  network 'labnet' do
    provisioners  [
      TestLab::Provisioner::Route,
      TestLab::Provisioner::Bind
    ]
    address       '10.10.0.1/16'
    bridge        :br0
  end

  # chef-server.default.zone
  ###########################
  container "chef-server" do
    distro        "ubuntu"
    release       "precise"

    provisioners   [
      TestLab::Provisioner::Resolv,
      TestLab::Provisioner::AptCacherNG,
      TestLab::Provisioner::Apt,
      TestLab::Provisioner::Chef::RubyGemServer
    ]

    # Here we define a default user to seed onto the box.  This user will be
    # given passwordless sudo access as well.
    user do
      username         'deployer'
      password         'deployer'
      identity         File.join(ENV['HOME'], '.ssh', 'id_rsa')
      public_identity  File.join(ENV['HOME'], '.ssh', 'id_rsa.pub')
      uid              2600
      gid              2600
    end

    # Interfaces define what networks this container is linked to and what our
    # configuration on that network should be.  In the event we have more than
    # one interface we should define one as the "primary".  When multiple
    # interfaces are at play, the default route for the container will be off
    # the primary interface.
    interface do
      network_id  'labnet'
      name        :eth0
      address     '10.10.0.254/16'
      mac         '00:00:5e:63:b5:9f'
    end
  end

  # chef-client.default.zone
  ###########################
  container "chef-client" do
    distro        "ubuntu"
    release       "precise"

    provisioners  [
      TestLab::Provisioner::Resolv,
      TestLab::Provisioner::AptCacherNG,
      TestLab::Provisioner::Apt,
      TestLab::Provisioner::Chef::RubyGemClient
    ]

    user do
      username         'deployer'
      password         'deployer'
      identity         File.join(ENV['HOME'], '.ssh', 'id_rsa')
      public_identity  File.join(ENV['HOME'], '.ssh', 'id_rsa.pub')
      uid              2600
      gid              2600
    end

    interface do
      network_id  'labnet'
      name        :eth0
      address     '10.10.0.20/16'
      mac         '00:00:5e:b7:e5:15'
    end
  end

end
